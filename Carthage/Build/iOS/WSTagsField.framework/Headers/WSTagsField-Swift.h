// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.31)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIFont;
@class UIColor;
@class NSCoder;
@class UITapGestureRecognizer;

SWIFT_CLASS("_TtC11WSTagsField9WSTagView")
@interface WSTagView : UIView
+ (CGFloat)xPadding;
+ (CGFloat)yPadding;
@property (nonatomic, copy) NSString * _Nonnull displayText;
@property (nonatomic, copy) NSString * _Nonnull displayDelimiter;
@property (nonatomic, strong) UIFont * _Nullable font;
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
@property (nonatomic, strong) UIColor * _Nullable selectedColor;
@property (nonatomic, strong) UIColor * _Nullable textColor;
@property (nonatomic, strong) UIColor * _Nullable selectedTextColor;
@property (nonatomic, copy) void (^ _Nullable onDidRequestDelete)(WSTagView * _Nonnull tagView, NSString * _Nullable replacementText);
@property (nonatomic, copy) void (^ _Nullable onDidRequestSelection)(WSTagView * _Nonnull tagView);
@property (nonatomic) BOOL selected;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)updateContentWithAnimated:(BOOL)animated;
- (CGSize)intrinsicContentSize;
- (CGSize)sizeThatFits:(CGSize)size;
- (CGSize)sizeToFit:(CGSize)size;
- (void)layoutSubviews;
- (BOOL)canBecomeFirstResponder;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (void)handleTapGestureRecognizer:(UITapGestureRecognizer * _Nonnull)sender;
@end


@interface WSTagView (SWIFT_EXTENSION(WSTagsField)) <UIKeyInput, UITextInputTraits>
- (BOOL)hasText;
- (void)insertText:(NSString * _Nonnull)text;
- (void)deleteBackward;
@end


SWIFT_CLASS("_TtC11WSTagsField11WSTagsField")
@interface WSTagsField : UIView
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
@property (nonatomic, strong) UIColor * _Nullable textColor;
@property (nonatomic, strong) UIColor * _Nullable selectedColor;
@property (nonatomic, strong) UIColor * _Nullable selectedTextColor;
@property (nonatomic, copy) NSString * _Nullable delimiter;
@property (nonatomic, strong) UIColor * _Nullable fieldTextColor;
@property (nonatomic, copy) NSString * _Nonnull placeholder;
@property (nonatomic, strong) UIFont * _Nullable font;
@property (nonatomic) BOOL readOnly;
@property (nonatomic) UIEdgeInsets padding;
@property (nonatomic) CGFloat spaceBetweenTags;
@property (nonatomic, copy) NSArray<WSTagView *> * _Nonnull tagViews;

/// Called when the text field begins editing
@property (nonatomic, copy) void (^ _Nullable onDidEndEditing)(WSTagsField * _Nonnull);

/// Called when the text field ends editing
@property (nonatomic, copy) void (^ _Nullable onDidBeginEditing)(WSTagsField * _Nonnull);

/// Called when the text field should return
@property (nonatomic, copy) BOOL (^ _Nullable onShouldReturn)(WSTagsField * _Nonnull);

/// Called when the text field text has changed. You should update your autocompleting UI based on the text supplied.
@property (nonatomic, copy) void (^ _Nullable onDidChangeText)(WSTagsField * _Nonnull, NSString * _Nullable text);

/// Called when the user attempts to press the Return key with text partially typed. @return A Tag for a match (typically the first item in the matching results), or nil if the text shouldn't be accepted.
@property (nonatomic, copy) BOOL (^ _Nullable onVerifyTag)(WSTagsField * _Nonnull, NSString * _Nonnull text);

/// Called when the view has updated its own height. If you are not using Autolayout, you should use this method to update the frames to make sure the tag view still fits.
@property (nonatomic, copy) void (^ _Nullable onDidChangeHeightTo)(WSTagsField * _Nonnull, CGFloat height);
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (CGSize)intrinsicContentSize;
- (void)layoutSubviews;

/// Take the text inside of the field and make it a Tag.
- (void)acceptCurrentTextAsTag;
@property (nonatomic, readonly) BOOL isEditing;
- (void)beginEditing;
- (void)endEditing;
- (void)addTags:(NSArray<NSString *> * _Nonnull)tags;
- (void)addTag:(NSString * _Nonnull)tag;
- (void)removeTag:(NSString * _Nonnull)tag;
- (void)removeTagAtIndex:(NSInteger)index;
- (void)removeTags;
- (void)onTextFieldDidChange:(id _Nonnull)sender;
- (void)selectTagView:(WSTagView * _Nonnull)tagView animated:(BOOL)animated;
- (void)unselectAllTagViewsAnimated:(BOOL)animated;
@end

@class UITextField;

@interface WSTagsField (SWIFT_EXTENSION(WSTagsField)) <UITextFieldDelegate>
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField;
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string;
@end

#pragma clang diagnostic pop
